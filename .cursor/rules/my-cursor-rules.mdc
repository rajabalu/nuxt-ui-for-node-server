---
description: 
globs: 
alwaysApply: true
---
# Implementation Patterns Reference

## Project Structure
- **Main Files**: 
  - `app.vue` - Main application component with v-app wrapper
  - `nuxt.config.js` - Configuration for Nuxt, i18n, plugins, and PWA
  - `.env` - Environment variables including API endpoints

## API Calls
- **ALWAYS** use the `useApi()` composable from `composables/api.js` for all API requests
- **NEVER** use direct fetch() or axios calls in components or stores
- **ALWAYS** use the consistent error handling pattern from api.js
- For file uploads, use `useApi().upload()` method, not custom fetch implementations

## **ALWAYS** use GlobalsTextField control to create new textbox or modify existing textboxes

## Event Communication
- **ALWAYS** use the event bus system via `re-useevent-bus.js` for cross-component communication
- **NEVER** create custom event systems or one-off emitters
- For component-specific events, use Vue's built-in emit system
- Document all events with clear names and expected payloads

## UI Toast Notifications
- **ALWAYS** use `useNotification()` from `composables/useNotification.js` for user feedback
- **NEVER** use alert(), console.log(), or custom toast implementations
- **USE** appropriate notification types:
  - `notification.success()` for successful operations
  - `notification.error()` for error messages and failures
  - `notification.info()` for general information
  - `notification.warning()` for warnings and cautions
- **INCLUDE** clear, actionable messages in notifications
- **DON'T** show sensitive information in notifications

## Authentication
- **NEVER** access tokens directly from localStorage
- **ALWAYS** use the auth store (`useAuthStore()`) to access or validate tokens
- **NEVER** manually include auth tokens in request headers - let api.js handle this
- For any auth checking, use the composables/auth.js helpers or store getters

## State Management
- Keep related API calls and state in dedicated stores
- Use composables to abstract common functionality
- Prefer using store actions for API calls rather than calling API directly in components

## API Call Pattern
- **Key Files**:
  - `composables/api.js` - Core API functionality with `useApi()` composable
  - `plugins/api.js` - Registers API services
  - `composables/useCrudOperations.js` - Reusable CRUD operations

- **Main Methods**:
  - `useApi().get(endpoint, options)` - GET requests
  - `useApi().post(endpoint, data, options)` - POST requests
  - `useApi().put(endpoint, data, options)` - PUT requests
  - `useApi().patch(endpoint, data, options)` - PATCH requests
  - `useApi().delete(endpoint, options)` - DELETE requests
  - `useApi().getBaseUrl()` - Returns the base API URL

- **CRUD Operations**:
  - `useCrudOperations(apiConfig).fetchData(params)` - List items with pagination
  - `useCrudOperations(apiConfig).createItem(data)` - Create new item
  - `useCrudOperations(apiConfig).updateItem(id, data)` - Update existing item
  - `useCrudOperations(apiConfig).deleteItem(id)` - Delete item
  - `useCrudOperations(apiConfig).getItem(id)` - Get single item

## Authentication System
- **Key Files**:
  - `stores/auth.js` - Pinia store for auth state
  - `composables/auth.js` - Auth composable with login/logout functions
  - `plugins/z-auth.js` - Auth initialization and API interceptors
  - `middleware/auth.js` - Route protection

- **Main Methods**:
  - `useAuthStore().login(email, password)` - Email login
  - `useAuthStore().logout()` - Logout user
  - `useAuthStore().refreshTokens()` - Refresh JWT tokens
  - `useAuthStore().fetchCurrentUser()` - Get current user data
  - `useAuth().isAuthenticated` - Check if user is authenticated

## Internationalization (i18n)
- **Key Files**:
  - `i18n/locales/*.json` - Translation files
  - `utils/i18n-helpers.js` - i18n utility functions
  - `plugins/rtl-support.client.js` - RTL handling

- **Main Methods**:
  - `getLocalizedPath(path, locale)` - Create localized route path
  - `useI18n().t(key)` - Access translations
  - `useI18n().locale.value` - Get/set current locale

## UI Components
- **Key Components**:
  - `components/globals/GlobalsHeader.vue` - Page header component
  - `components/globals/GlobalsTextField.vue` - Styled text input component
  - `components/globals/GlobalsAlert.vue` - Alert component

- **Form Handling**:
  - `composables/validators.js` - Input validation functions
  - `useValidators()` - Access validation rules

## Settings Module Implementation
- **Key Files**:
  - `pages/settings.vue` - Main settings page
  - `components/apps/profile/Settings.vue` - Settings implementation

- **Implementation Pattern**:
  1. Main page imports component: `import Settings from "@/components/apps/profile/Settings.vue"`
  2. Component uses v-tabs for different settings sections
  3. Form data in reactive objects: `const basicForm = reactive({...})`
  4. Validation with form refs: `refPasswordVForm.value?.validate()`
  5. API calls with proper error handling and loading states
  6. Success/error feedback with alerts

## Navigation
- **Implementation Methods**:
  - `navigateTo(path)` - Navigate to route
  - `getLocalizedPath('/path', locale)` - Create localized path
  - `useRouter().push(path)` - Alternative navigation

## Notification System
- **Key Files**:
  - `composables/useNotification.js` - Notification handling

- **Main Methods**:
  - `useNotification().success(message)` - Success notification
  - `useNotification().error(message)` - Error notification
  - `useNotification().info(message)` - Info notification

## New Module Implementation Checklist
1. Create page in `pages/module-name.vue`
2. Create component in `components/apps/module-name/ModuleName.vue`
3. Add translations in `i18n/locales/*.json`
4. Implement API calls using `useApi()` or `useCrudOperations()`
5. Use Vuetify components with GlobalsComponents
6. Implement proper i18n support with `useI18n().t()`
7. Add RTL support with container classes
8. Use existing validation and notification systems

This pattern structure should be followed for all new module implementations to maintain consistency.
